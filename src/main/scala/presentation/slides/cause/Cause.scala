package com.github.morotsman
package presentation.slides.cause

import presentation.tools.{Input, NConsole, Slide}

import cats.effect.Sync

case class Cause[F[_]: NConsole : Sync]() extends Slide[F] {
  val text =
    """
      |
      |
      |
      |                           ___                                                        __                          _ _              __      _ _
      |                          / __|___ _ __  _ __  ___ _ _    __ __ _ _  _ ___ ___   ___ / _|  __ __ _ ___ __ __ _ __| (_)_ _  __ _   / _|__ _(_) |_  _ _ _ ___
      |                         | (__/ _ \ '  \| '  \/ _ \ ' \  / _/ _` | || (_-</ -_) / _ \  _| / _/ _` (_-</ _/ _` / _` | | ' \/ _` | |  _/ _` | | | || | '_/ -_)
      |                          \___\___/_|_|_|_|_|_\___/_||_| \__\__,_|\_,_/__/\___| \___/_|   \__\__,_/__/\__\__,_\__,_|_|_||_\__, | |_| \__,_|_|_|\_,_|_| \___|
      |                                                                                                                          |___/
      |
      |
      |
      |
      |      ___     _ _ _                _            _           __        ___                                              __
      |  _  | __|_ _(_) (_)_ _  __ _   __| |_____ __ _| |_  _    __\ \      / _ \__ _____ _ _   _  _ ___ __ _ __ _ ___   ___ / _|  ___ __ __ _ _ _ __ ___   _ _ ___ ___ ___ _  _ _ _ __ ___ ___
      | (_) | _/ _` | | | | ' \/ _` | (_-< / _ \ V  V / | || |  |___> >    | (_) \ V / -_) '_| | || (_-</ _` / _` / -_) / _ \  _| (_-</ _/ _` | '_/ _/ -_) | '_/ -_|_-</ _ \ || | '_/ _/ -_|_-<
      |     |_|\__,_|_|_|_|_||_\__, | /__/_\___/\_/\_/|_|\_, |     /_/      \___/ \_/\___|_|    \_,_/__/\__,_\__, \___| \___/_|   /__/\__\__,_|_| \__\___| |_| \___/__/\___/\_,_|_| \__\___/__/
      |                        |___/                     |__/                                                |___/
      |
      |
      |
      |      ___                          _                _      _                                               _   _   _                    _                  _
      |  _  |_ _|_ _    ___ _  _ _ _   __| |___ _ __  __ _(_)_ _ (_)  _ __  ___ _ __  ___ _ _ _  _   __ _ _ _  __| | | |_| |_  _ _ ___ __ _ __| |  _ __  ___  ___| |___
      | (_)  | || ' \  / _ \ || | '_| / _` / _ \ '  \/ _` | | ' \ _  | '  \/ -_) '  \/ _ \ '_| || | / _` | ' \/ _` | |  _| ' \| '_/ -_) _` / _` | | '_ \/ _ \/ _ \ (_-<
      |     |___|_||_| \___/\_,_|_|   \__,_\___/_|_|_\__,_|_|_||_(_) |_|_|_\___|_|_|_\___/_|  \_, | \__,_|_||_\__,_|  \__|_||_|_| \___\__,_\__,_| | .__/\___/\___/_/__/
      |                                                                                       |__/                                                |_|
      |
      |
      |
      |
      |
      |""".stripMargin

  override def show(): F[Unit] = NConsole[F].writeStringCenterAligned(text)

  override def userInput(input: Input): F[Unit] = Sync[F].unit
}
